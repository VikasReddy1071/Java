import javax.swing.JFrame;

public class SnakeGame extends JFrame {

    public SnakeGame() {
        add(new GamePanel());
        setTitle("Snake Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    public static void main(String[] args) {
        new SnakeGame();
    }
}
import javax.swing.JPanel;
import javax.swing.Timer;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

public class GamePanel extends JPanel implements ActionListener {

    private static final int TILE_SIZE = 20;
    private static final int GAME_UNITS = 30;
    private static final int SCREEN_SIZE = TILE_SIZE * GAME_UNITS;
    private static final int DELAY = 140;

    private Timer timer;
    private boolean running = false;
    private ArrayList<int[]> snake;
    private int[] food;
    private char direction = 'R'; // U, D, L, R
    private Random random;

    public GamePanel() {
        setPreferredSize(new Dimension(SCREEN_SIZE, SCREEN_SIZE));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        if (direction != 'D') direction = 'U';
                        break;
                    case KeyEvent.VK_DOWN:
                        if (direction != 'U') direction = 'D';
                        break;
                    case KeyEvent.VK_LEFT:
                        if (direction != 'R') direction = 'L';
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (direction != 'L') direction = 'R';
                        break;
                }
            }
        });
        random = new Random();
        startGame();
    }

    public void startGame() {
        snake = new ArrayList<>();
        snake.add(new int[]{5, 5});
        spawnFood();
        running = true;
        timer = new Timer(DELAY, this);
        timer.start();
    }

    public void spawnFood() {
        int x = random.nextInt(GAME_UNITS);
        int y = random.nextInt(GAME_UNITS);
        food = new int[]{x, y};
    }

    public void move() {
        int[] head = snake.get(0).clone();
        switch (direction) {
            case 'U': head[1]--; break;
            case 'D': head[1]++; break;
            case 'L': head[0]--; break;
            case 'R': head[0]++; break;
        }
        snake.add(0, head);
        if (head[0] == food[0] && head[1] == food[1]) {
            spawnFood();
        } else {
            snake.remove(snake.size() - 1);
        }
    }

    public void checkCollisions() {
        int[] head = snake.get(0);
        for (int i = 1; i < snake.size(); i++) {
            if (head[0] == snake.get(i)[0] && head[1] == snake.get(i)[1]) {
                running = false;
            }
        }
        if (head[0] < 0 || head[0] >= GAME_UNITS || head[1] < 0 || head[1] >= GAME_UNITS) {
            running = false;
        }
        if (!running) {
            timer.stop();
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    public void draw(Graphics g) {
        if (running) {
            g.setColor(Color.RED);
            g.fillRect(food[0] * TILE_SIZE, food[1] * TILE_SIZE, TILE_SIZE, TILE_SIZE);

            for (int[] part : snake) {
                g.setColor(Color.GREEN);
                g.fillRect(part[0] * TILE_SIZE, part[1] * TILE_SIZE, TILE_SIZE, TILE_SIZE);
            }

            g.setColor(Color.WHITE);
            g.setFont(new Font("Ink Free", Font.BOLD, 40));
            g.drawString("Score: " + (snake.size() - 1), 10, 40);
        } else {
            gameOver(g);
        }
    }

    public void gameOver(Graphics g) {
        g.setColor(Color.RED);
        g.setFont(new Font("Ink Free", Font.BOLD, 75));
        g.drawString("Game Over", (SCREEN_SIZE - g.getFontMetrics().stringWidth("Game Over")) / 2, SCREEN_SIZE / 2);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkCollisions();
        }
        repaint();
    }
}
